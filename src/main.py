#!/usr/bin/env python
import os
import pprint
import re
import sys


def remove_leading(str, leading):
    if str.startswith(leading):
        return str[len(leading):]

    return str


def format_ignore(relative_ignore, path, inner_path):
    relative_ignore = relative_ignore.strip()
    if sys.platform == 'win32':
        relative_ignore = relative_ignore.replace('/', '\\')
    relative_ignore = relative_ignore.lstrip(os.sep)
    relative_ignore = os.path.join(inner_path, relative_ignore)
    relative_ignore = remove_leading(relative_ignore, path.rstrip(os.sep))
    relative_ignore = '*' + relative_ignore

    return relative_ignore

def get_excludes_recursive(path):
    doxignores = []
    for (dirpath, dirnames, filenames) in os.walk(path):
        if '.doxignore' in filenames:
            doxignores.append(os.path.join(dirpath, '.doxignore'))

    ignores = []
    for doxignore in doxignores:
        with open(doxignore, 'rb') as f:
            ignores.extend(
                [format_ignore(ignore, path, os.path.dirname(doxignore)) for ignore in f.readlines()])

    return ignores

def replace_in_cfg(cfg_path, exclude_list):
    with open(cfg_path, 'rb') as config:
        content = config.read()

    match = re.search(r'((?:[^\n]*\n)*)\s*EXCLUDE_PATTERNS\s*=((?:[^\n]*(?<=\\)\n)*[^\n]*\n)((?:[^\n]*\n)*)', content)

    if len(match.groups()) != 3:
        return None

    join_string = ' \\' + '\n' + '                   '
    result_list = [exclude.strip().rstrip('\\') for exclude in match.group(2).strip().split('\n')]
    result = join_string.join(result_list + exclude_list)
    return """%s
# This part is auto generated by doxitgen
EXCLUDE_PATTERNS = %s
%s""" % (match.group(1), result, match.group(3))

if __name__ == "__main__":
    print replace_in_cfg('doxygen.config', get_excludes_recursive(os.getcwd()))

    # TODO: add arguments
    # TODO: create tmp file for config
    # TODO: print generated config